#!/bin/bash

# Cortex Link-Validation Pre-commit Hook
# Prevents commits with broken links or critical system violations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'  
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
FRAMEWORK_PATH="$(dirname "$(readlink -f "$0")")/../.."
TEST_SCRIPT="$FRAMEWORK_PATH/test-manager-enhanced.sh"
CRITICAL_CONFIG="$FRAMEWORK_PATH/.cortex-critical.yml"

echo -e "${BLUE}üîç Cortex Pre-commit Validation${NC}"
echo "=================================="

# Check if test framework is available
if [ ! -f "$TEST_SCRIPT" ]; then
    echo -e "${RED}‚ùå Error: Cortex test framework not found at $TEST_SCRIPT${NC}"
    echo "Please ensure the cortex-test-framework is properly installed."
    exit 1
fi

# Get list of changed .md files
CHANGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)

if [ -z "$CHANGED_MD_FILES" ]; then
    echo -e "${GREEN}‚úÖ No markdown files changed, skipping link validation${NC}"
    exit 0
fi

echo -e "${BLUE}üìù Changed markdown files:${NC}"
echo "$CHANGED_MD_FILES" | sed 's/^/  - /'
echo ""

# Function to check if file is critical
is_critical_file() {
    local file="$1"
    
    # Check against critical files list if config exists
    if [ -f "$CRITICAL_CONFIG" ]; then
        while IFS= read -r critical_pattern; do
            # Skip comments and empty lines
            [[ "$critical_pattern" =~ ^[[:space:]]*# ]] && continue
            [[ -z "$critical_pattern" ]] && continue
            
            if [[ "$file" =~ $critical_pattern ]]; then
                return 0  # Is critical
            fi
        done < "$CRITICAL_CONFIG"
    fi
    
    # Default critical files (core system components)
    case "$file" in
        *"System-Workflows"*|*"Confidence Calculator"*|*"Auth-System"*|*"Quality-Gates"*)
            return 0  # Is critical
            ;;
        *"/ADR-"*|*"Cortex-Hub"*)
            return 0  # Is critical
            ;;
        *"/00-Templates/"*)
            return 1  # Templates are not critical for link validation
            ;;
    esac
    
    return 1  # Not critical
}

# Run quick link validation
echo -e "${BLUE}üîó Running link validation...${NC}"
if ! "$TEST_SCRIPT" link-health > /tmp/pre-commit-validation.log 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Link validation found issues${NC}"
    
    # Extract health score from log
    HEALTH_SCORE=$(grep "Health Score:" /tmp/pre-commit-validation.log | grep -o '[0-9.]*%' || echo "unknown")
    BROKEN_COUNT=$(grep "Issues found:" /tmp/pre-commit-validation.log | grep -o '[0-9]*' || echo "unknown")
    
    echo "Current Health Score: $HEALTH_SCORE"
    echo "Broken links found: $BROKEN_COUNT"
    echo ""
    
    # Check if any critical files are involved
    CRITICAL_FILES_CHANGED=false
    while IFS= read -r file; do
        if is_critical_file "$file"; then
            CRITICAL_FILES_CHANGED=true
            break
        fi
    done <<< "$CHANGED_MD_FILES"
    
    if [ "$CRITICAL_FILES_CHANGED" = true ]; then
        echo -e "${RED}üö´ COMMIT BLOCKED: Critical system files have broken links${NC}"
        echo ""
        echo "Critical files changed:"
        while IFS= read -r file; do
            if is_critical_file "$file"; then
                echo -e "  ${RED}‚ö†Ô∏è  $file${NC}"
            fi
        done <<< "$CHANGED_MD_FILES"
        echo ""
        echo "Please fix broken links in critical files before committing."
        echo "Run: ./test-manager-enhanced.sh view-broken-links latest"
        echo ""
        exit 1
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Non-critical files have broken links${NC}"
        echo "Commit allowed, but please consider fixing these issues:"
        echo ""
        
        # Show summary of broken links
        if grep -q "BROKEN" /tmp/pre-commit-validation.log; then
            echo "Recent broken links found. Run for details:"
            echo "./test-manager-enhanced.sh view-broken-links latest"
        fi
        echo ""
    fi
else
    # Validation passed
    HEALTH_SCORE=$(grep "Health Score:" /tmp/pre-commit-validation.log | grep -o '[0-9.]*%' || echo "unknown")
    echo -e "${GREEN}‚úÖ Link validation passed${NC}"
    echo "Health Score: $HEALTH_SCORE"
fi

# Template-specific validations
echo ""
echo -e "${BLUE}üìã Template validation...${NC}"

TEMPLATE_ERRORS=0
while IFS= read -r file; do
    # Skip if file doesn't exist (deleted files)
    [ ! -f "$file" ] && continue
    
    # Check for template structure if it's a template file
    if [[ "$file" =~ /00-Templates/ ]]; then
        # Validate template has required placeholders
        if ! grep -q "{{.*}}" "$file" 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Template $file may be missing placeholders${NC}"
            ((TEMPLATE_ERRORS++))
        fi
    fi
    
    # Check for accidentally committed personal info
    if grep -qE "(password|secret|key|token|credential)" "$file" 2>/dev/null; then
        echo -e "${RED}üö® Potential secret detected in $file${NC}"
        echo "Please review and remove any sensitive information."
        ((TEMPLATE_ERRORS++))
    fi
    
done <<< "$CHANGED_MD_FILES"

# Final decision
if [ $TEMPLATE_ERRORS -gt 0 ]; then
    echo ""
    echo -e "${RED}üö´ COMMIT BLOCKED: Template validation errors found${NC}"
    echo "Please fix the issues above before committing."
    exit 1
fi

# Success
echo ""
echo -e "${GREEN}‚úÖ All validations passed - commit allowed${NC}"
echo -e "${BLUE}üéØ Consider running 'cortex-test unified' for comprehensive validation${NC}"

# Cleanup
rm -f /tmp/pre-commit-validation.log

exit 0