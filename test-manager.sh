#!/bin/bash\n# Cortex Test Framework Manager\n# Isolated testing environment for Cortex templates and workflows\n\nFRAMEWORK_PATH=\"/Users/simonjanke/Projects/cortex-test-framework\"\nCORTEX_PATH=\"/Users/simonjanke/Projects/cortex\"\nTEST_PROJECTS_PATH=\"$FRAMEWORK_PATH/test-projects\"\nTEST_RESULTS_PATH=\"$FRAMEWORK_PATH/test-results\"\n\nfunction show_help() {\n    echo \"üß™ Cortex Test Framework Manager\"\n    echo \"\"\n    echo \"Usage: $0 {create|run|teardown|report|status|list}\"\n    echo \"\"\n    echo \"Commands:\"\n    echo \"  create <project-name> <template-type>  - Create new test project\"\n    echo \"  run <test-scenario> [project-name]      - Run test scenarios\"\n    echo \"  teardown <project-name>                 - Clean up test project\"\n    echo \"  report <project-name>                   - Generate test report\"\n    echo \"  status                                   - Show framework status\"\n    echo \"  list                                     - List active test projects\"\n    echo \"\"\n    echo \"Template Types:\"\n    echo \"  - adr-workflow          # ADR template testing\"\n    echo \"  - project-workspace     # Project workspace testing\"\n    echo \"  - decision-pattern      # Decision pattern validation\"\n    echo \"  - integration-test      # Cross-template testing\"\n    echo \"  - performance-test      # Performance benchmarking\"\n    echo \"\"\n    echo \"Test Scenarios:\"\n    echo \"  - template-validation   # Validate template completeness\"\n    echo \"  - workflow-test         # End-to-end workflow testing\"\n    echo \"  - confidence-accuracy   # Decision confidence testing\"\n    echo \"  - performance-benchmark # Speed and efficiency testing\"\n    echo \"  - integration-check     # Cross-system compatibility\"\n    echo \"\"\n    echo \"üîó Framework automatically links to Cortex for result integration\"\n}\n\nfunction create_test_project() {\n    local project_name=\"$1\"\n    local template_type=\"$2\"\n    \n    if [ -z \"$project_name\" ] || [ -z \"$template_type\" ]; then\n        echo \"‚ùå Error: Project name and template type required\"\n        echo \"Usage: $0 create <project-name> <template-type>\"\n        return 1\n    fi\n    \n    local project_path=\"$TEST_PROJECTS_PATH/$project_name\"\n    \n    if [ -d \"$project_path\" ]; then\n        echo \"‚ùå Error: Test project '$project_name' already exists\"\n        return 1\n    fi\n    \n    echo \"üöÄ Creating test project: $project_name\"\n    echo \"üìã Template type: $template_type\"\n    \n    # Create project structure\n    mkdir -p \"$project_path\"\n    mkdir -p \"$project_path/templates\"\n    mkdir -p \"$project_path/test-data\"\n    mkdir -p \"$project_path/results\"\n    \n    # Run setup script\n    bash \"$FRAMEWORK_PATH/setup-scripts/create-$template_type.sh\" \"$project_name\" \"$project_path\"\n    \n    # Create project metadata\n    cat > \"$project_path/test-project.yaml\" << EOF\nproject_name: $project_name\ntemplate_type: $template_type\ncreated: $(date -Iseconds)\nstatus: active\ncortex_link: $CORTEX_PATH\nEOF\n    \n    # Link to Cortex\n    bash \"$FRAMEWORK_PATH/setup-scripts/link-to-cortex.sh\" \"$project_name\"\n    \n    echo \"‚úÖ Test project '$project_name' created successfully\"\n    echo \"üìÅ Location: $project_path\"\n    echo \"üîó Linked to Cortex for result integration\"\n}\n\nfunction run_test_scenario() {\n    local test_scenario=\"$1\"\n    local project_name=\"$2\"\n    \n    if [ -z \"$test_scenario\" ]; then\n        echo \"‚ùå Error: Test scenario required\"\n        echo \"Usage: $0 run <test-scenario> [project-name]\"\n        return 1\n    fi\n    \n    echo \"üß™ Running test scenario: $test_scenario\"\n    \n    if [ -n \"$project_name\" ]; then\n        echo \"üìã Target project: $project_name\"\n        # Run test on specific project\n        bash \"$FRAMEWORK_PATH/setup-scripts/run-$test_scenario.sh\" \"$project_name\"\n    else\n        echo \"üìã Running on all active projects\"\n        # Run test on all active projects\n        for project_dir in \"$TEST_PROJECTS_PATH\"/*; do\n            if [ -d \"$project_dir\" ]; then\n                local project=$(basename \"$project_dir\")\n                echo \"  Testing: $project\"\n                bash \"$FRAMEWORK_PATH/setup-scripts/run-$test_scenario.sh\" \"$project\"\n            fi\n        done\n    fi\n    \n    echo \"‚úÖ Test scenario '$test_scenario' completed\"\n}\n\nfunction teardown_test_project() {\n    local project_name=\"$1\"\n    \n    if [ -z \"$project_name\" ]; then\n        echo \"‚ùå Error: Project name required\"\n        echo \"Usage: $0 teardown <project-name>\"\n        return 1\n    fi\n    \n    local project_path=\"$TEST_PROJECTS_PATH/$project_name\"\n    \n    if [ ! -d \"$project_path\" ]; then\n        echo \"‚ùå Error: Test project '$project_name' not found\"\n        return 1\n    fi\n    \n    echo \"üßπ Tearing down test project: $project_name\"\n    \n    # Archive results before cleanup\n    bash \"$FRAMEWORK_PATH/teardown-scripts/archive-results.sh\" \"$project_name\"\n    \n    # Unlink from Cortex\n    bash \"$FRAMEWORK_PATH/teardown-scripts/unlink-from-cortex.sh\" \"$project_name\"\n    \n    # Remove project directory\n    rm -rf \"$project_path\"\n    \n    echo \"‚úÖ Test project '$project_name' torn down successfully\"\n    echo \"üìÅ Results archived in: $TEST_RESULTS_PATH/archived/$project_name\"\n}\n\nfunction generate_report() {\n    local project_name=\"$1\"\n    \n    if [ -z \"$project_name\" ]; then\n        echo \"‚ùå Error: Project name required\"\n        echo \"Usage: $0 report <project-name>\"\n        return 1\n    fi\n    \n    echo \"üìä Generating test report for: $project_name\"\n    \n    bash \"$FRAMEWORK_PATH/setup-scripts/generate-report.sh\" \"$project_name\"\n    \n    echo \"‚úÖ Test report generated\"\n    echo \"üìÑ Location: $TEST_RESULTS_PATH/$project_name-report.md\"\n}\n\nfunction show_status() {\n    echo \"üß™ Cortex Test Framework Status\"\n    echo \"\"\n    echo \"üìÅ Framework Path: $FRAMEWORK_PATH\"\n    echo \"üîó Cortex Path: $CORTEX_PATH\"\n    echo \"\"\n    \n    local active_projects=$(find \"$TEST_PROJECTS_PATH\" -maxdepth 1 -type d ! -path \"$TEST_PROJECTS_PATH\" | wc -l)\n    echo \"üìã Active Test Projects: $active_projects\"\n    \n    if [ $active_projects -gt 0 ]; then\n        echo \"\"\n        echo \"Active Projects:\"\n        for project_dir in \"$TEST_PROJECTS_PATH\"/*; do\n            if [ -d \"$project_dir\" ]; then\n                local project=$(basename \"$project_dir\")\n                local template_type=$(grep \"template_type:\" \"$project_dir/test-project.yaml\" | cut -d' ' -f2)\n                local created=$(grep \"created:\" \"$project_dir/test-project.yaml\" | cut -d' ' -f2)\n                echo \"  - $project ($template_type) - Created: $created\"\n            fi\n        done\n    fi\n    \n    echo \"\"\n    echo \"üìä Recent Test Results:\"\n    if [ -d \"$TEST_RESULTS_PATH\" ]; then\n        ls -la \"$TEST_RESULTS_PATH\" | tail -5\n    else\n        echo \"  No test results yet\"\n    fi\n}\n\nfunction list_projects() {\n    echo \"üìã Active Test Projects:\"\n    echo \"\"\n    \n    if [ ! -d \"$TEST_PROJECTS_PATH\" ] || [ -z \"$(ls -A \"$TEST_PROJECTS_PATH\")\" ]; then\n        echo \"  No active test projects\"\n        return 0\n    fi\n    \n    for project_dir in \"$TEST_PROJECTS_PATH\"/*; do\n        if [ -d \"$project_dir\" ]; then\n            local project=$(basename \"$project_dir\")\n            if [ -f \"$project_dir/test-project.yaml\" ]; then\n                local template_type=$(grep \"template_type:\" \"$project_dir/test-project.yaml\" | cut -d' ' -f2)\n                local status=$(grep \"status:\" \"$project_dir/test-project.yaml\" | cut -d' ' -f2)\n                local created=$(grep \"created:\" \"$project_dir/test-project.yaml\" | cut -d' ' -f2)\n                echo \"  üß™ $project\"\n                echo \"     Type: $template_type\"\n                echo \"     Status: $status\"\n                echo \"     Created: $created\"\n                echo \"\"\n            fi\n        fi\n    done\n}\n\n# Main command dispatcher\ncase \"$1\" in\n    create)\n        create_test_project \"$2\" \"$3\"\n        ;;\n    run)\n        run_test_scenario \"$2\" \"$3\"\n        ;;\n    teardown)\n        teardown_test_project \"$2\"\n        ;;\n    report)\n        generate_report \"$2\"\n        ;;\n    status)\n        show_status\n        ;;\n    list)\n        list_projects\n        ;;\n    \"\")\n        show_help\n        ;;\n    *)\n        echo \"‚ùå Unknown command: $1\"\n        show_help\n        exit 1\n        ;;\nesac\n